#!/usr/bin/env python3
"""
Script de teste para verificar se o sistema Pass√¥metro est√° funcionando
"""

import os
import sys
import requests
from datetime import datetime

def test_database_connection():
    """Testar conex√£o com o banco de dados"""
    try:
        from app import app, db
        from models import Usuario, Unidade, PostoTrabalho
        
        with app.app_context():
            # Testar conex√£o
            db.engine.execute('SELECT 1')
            print("‚úì Conex√£o com banco de dados OK")
            
            # Verificar se existem dados
            usuarios = Usuario.query.count()
            unidades = Unidade.query.count()
            postos = PostoTrabalho.query.count()
            
            print(f"‚úì Dados encontrados: {usuarios} usu√°rios, {unidades} unidades, {postos} postos")
            
            return True
    except Exception as e:
        print(f"‚úó Erro na conex√£o com banco de dados: {e}")
        return False

def test_flask_app():
    """Testar se a aplica√ß√£o Flask est√° funcionando"""
    try:
        from app import app
        
        # Testar se a aplica√ß√£o pode ser criada
        with app.test_client() as client:
            # Testar rota de login
            response = client.get('/login')
            if response.status_code == 200:
                print("‚úì Aplica√ß√£o Flask funcionando")
                return True
            else:
                print(f"‚úó Erro na aplica√ß√£o Flask: status {response.status_code}")
                return False
    except Exception as e:
        print(f"‚úó Erro na aplica√ß√£o Flask: {e}")
        return False

def test_dependencies():
    """Testar se todas as depend√™ncias est√£o instaladas"""
    required_packages = [
        'flask',
        'flask_sqlalchemy',
        'flask_login',
        'pymysql',
        'werkzeug',
        'python_dotenv'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"‚úì {package} instalado")
        except ImportError:
            print(f"‚úó {package} n√£o encontrado")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ùå Pacotes faltando: {', '.join(missing_packages)}")
        print("Execute: pip install -r requirements.txt")
        return False
    
    return True

def test_environment():
    """Testar configura√ß√µes do ambiente"""
    print("\n=== Teste de Ambiente ===")
    
    # Verificar Python
    python_version = sys.version_info
    if python_version.major >= 3 and python_version.minor >= 8:
        print(f"‚úì Python {python_version.major}.{python_version.minor}.{python_version.micro} OK")
    else:
        print(f"‚úó Python {python_version.major}.{python_version.minor}.{python_version.micro} - Vers√£o 3.8+ requerida")
        return False
    
    # Verificar arquivos essenciais
    essential_files = [
        'app.py',
        'models.py',
        'routes.py',
        'requirements.txt',
        'templates/base.html',
        'static/css/style.css',
        'static/js/app.js'
    ]
    
    missing_files = []
    for file in essential_files:
        if os.path.exists(file):
            print(f"‚úì {file} encontrado")
        else:
            print(f"‚úó {file} n√£o encontrado")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n‚ùå Arquivos faltando: {', '.join(missing_files)}")
        return False
    
    return True

def test_mysql_connection():
    """Testar conex√£o espec√≠fica com MySQL"""
    try:
        import pymysql
        
        # Tentar conectar com as credenciais padr√£o
        connection = pymysql.connect(
            host='localhost',
            user='root',
            password='12345678',
            database='passometro',
            charset='utf8mb4'
        )
        
        with connection.cursor() as cursor:
            cursor.execute('SELECT VERSION()')
            version = cursor.fetchone()
            print(f"‚úì MySQL conectado - Vers√£o: {version[0]}")
        
        connection.close()
        return True
        
    except Exception as e:
        print(f"‚úó Erro na conex√£o MySQL: {e}")
        print("\nVerifique se:")
        print("1. MySQL est√° rodando")
        print("2. Banco 'passometro' existe")
        print("3. Usu√°rio 'root' com senha '12345678' tem acesso")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("=== Teste do Sistema Pass√¥metro ===\n")
    
    tests = [
        ("Ambiente", test_environment),
        ("Depend√™ncias", test_dependencies),
        ("MySQL", test_mysql_connection),
        ("Banco de Dados", test_database_connection),
        ("Aplica√ß√£o Flask", test_flask_app)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n--- Teste: {test_name} ---")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚úó Erro no teste {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumo
    print("\n" + "="*50)
    print("RESUMO DOS TESTES")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úì PASSOU" if result else "‚úó FALHOU"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nResultado: {passed}/{total} testes passaram")
    
    if passed == total:
        print("\nüéâ Todos os testes passaram! O sistema est√° pronto para uso.")
        print("\nPara iniciar o servidor:")
        print("python app.py")
        print("\nAcesse: http://localhost:5000")
    else:
        print(f"\n‚ùå {total - passed} teste(s) falharam. Verifique os erros acima.")
        print("\nSugest√µes:")
        print("1. Execute: pip install -r requirements.txt")
        print("2. Configure o banco MySQL")
        print("3. Execute: python init_db.py")
        print("4. Verifique as configura√ß√µes no arquivo .env")

if __name__ == "__main__":
    main() 