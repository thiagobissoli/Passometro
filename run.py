#!/usr/bin/env python3
"""
Script de execu√ß√£o do Pass√¥metro
Facilita o in√≠cio do servidor com verifica√ß√µes autom√°ticas
"""

import os
import sys
import subprocess
from pathlib import Path

def check_python_version():
    """Verificar vers√£o do Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou superior √© necess√°rio")
        print(f"Vers√£o atual: {sys.version}")
        return False
    return True

def check_virtual_env():
    """Verificar se est√° em ambiente virtual"""
    if not hasattr(sys, 'real_prefix') and not (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚ö†Ô∏è  Ambiente virtual n√£o detectado")
        print("Recomendado: python -m venv .venv && source .venv/bin/activate")
        return False
    return True

def check_dependencies():
    """Verificar depend√™ncias instaladas"""
    try:
        import flask
        import flask_sqlalchemy
        import flask_login
        import pymysql
        print("‚úì Depend√™ncias principais encontradas")
        return True
    except ImportError as e:
        print(f"‚ùå Depend√™ncia faltando: {e}")
        print("Execute: pip install -r requirements.txt")
        return False

def check_database():
    """Verificar se o banco est√° configurado"""
    try:
        from app import app, db
        with app.app_context():
            # Usar a nova sintaxe do SQLAlchemy
            with db.engine.connect() as connection:
                connection.execute(db.text('SELECT 1'))
            print("‚úì Banco de dados acess√≠vel")
            return True
    except Exception as e:
        print(f"‚ùå Erro no banco de dados: {e}")
        print("Verifique se:")
        print("1. MySQL est√° rodando")
        print("2. Banco 'passometro' existe")
        print("3. Execute: python init_db.py")
        return False

def check_data():
    """Verificar se existem dados no sistema"""
    try:
        from app import app
        from models import Usuario
        
        with app.app_context():
            count = Usuario.query.count()
            if count > 0:
                print(f"‚úì {count} usu√°rios encontrados no sistema")
                return True
            else:
                print("‚ö†Ô∏è  Nenhum usu√°rio encontrado")
                print("Execute: python init_db.py")
                return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar dados: {e}")
        return False

def start_server():
    """Iniciar o servidor Flask"""
    print("\nüöÄ Iniciando servidor Pass√¥metro...")
    print("=" * 50)
    
    try:
        from app import app
        print("‚úì Aplica√ß√£o carregada com sucesso")
        print("\nüìã Informa√ß√µes:")
        print("‚Ä¢ URL: http://localhost:5001")
        print("‚Ä¢ Modo: Desenvolvimento")
        print("‚Ä¢ Debug: Ativado")
        print("\nüë§ Credenciais de teste:")
        print("‚Ä¢ Email: joao.silva@hospital.com")
        print("‚Ä¢ Senha: 123456")
        print("\n" + "=" * 50)
        print("Pressione Ctrl+C para parar o servidor")
        print("=" * 50)
        
        # Usar porta 5001 por padr√£o
        app.run(debug=True, host='0.0.0.0', port=5001)
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar servidor: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üè• Pass√¥metro - Sistema de Passagem de Plant√£o")
    print("=" * 50)
    
    # Verifica√ß√µes
    checks = [
        ("Vers√£o do Python", check_python_version),
        ("Ambiente Virtual", check_virtual_env),
        ("Depend√™ncias", check_dependencies),
        ("Banco de Dados", check_database),
        ("Dados do Sistema", check_data)
    ]
    
    failed_checks = []
    
    for check_name, check_func in checks:
        print(f"\nüîç Verificando {check_name}...")
        if not check_func():
            failed_checks.append(check_name)
    
    if failed_checks:
        print(f"\n‚ùå Verifica√ß√µes falharam: {', '.join(failed_checks)}")
        print("\nüí° Solu√ß√µes:")
        print("1. Instale Python 3.8+: https://python.org")
        print("2. Crie ambiente virtual: python -m venv .venv")
        print("3. Ative o ambiente: source .venv/bin/activate")
        print("4. Instale depend√™ncias: pip install -r requirements.txt")
        print("5. Configure MySQL e execute: python init_db.py")
        return False
    
    print("\n‚úÖ Todas as verifica√ß√µes passaram!")
    
    # Iniciar o servidor
    try:
        return start_server()
    except KeyboardInterrupt:
        print("\nOpera√ß√£o cancelada pelo usu√°rio.")
        return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\nüëã Sistema encerrado.")
        sys.exit(0) 